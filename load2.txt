#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define PI 3.14159265359

double calculateCurrent(double voltage, double resistance) {
    return voltage / resistance;
}

int main(int argc, char *argv[]) {
    double resistance;

    if (argc < 2) {
        printf("insufficent parameters.used:load2.exe <empedance>\n");
        return 1;
    }

    double empedance = atof(argv[1]);

    printf("resistance? (ohm): ");
    scanf("%lf", &resistance);

    FILE *file = fopen("C:\\Users\\pltra\\OneDrive\\text.txt", "r");



    if (file == NULL) {
        printf("file not open.\n");
        return 1;
    }

    double voltage;
    double timeStep = 1.0 / 1000; // Örnekleme adımı (sampling step)
    double time = 0.0;

    printf("voltages: \n");

    while (fscanf(file, "%lf", &voltage) == 1) {
        double angularFrequency = 2 * PI * voltage;

        for (int i = 0; i < 1000; i++) {
            double instantaneousVoltage = voltage * sin(angularFrequency * time);
            double instantaneousCurrent = calculateCurrent(instantaneousVoltage, resistance);

            // Empedans hesaplaması
            double empedanceVoltage = instantaneousVoltage / empedance;
            double empedanceCurrent = calculateCurrent(empedanceVoltage, resistance);

            printf("time: %.4f s, voltage: %.2f V, current: %.2f A, empedance voltage: %.4f V, empedance current: %.4f A\n", time, instantaneousVoltage, instantaneousCurrent, empedanceVoltage, empedanceCurrent);
            time += timeStep;
        }
    }

    fclose(file);

    return 0;
}





/*
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define PI 3.14159265359

double calculateCurrent(double voltage, double resistance) {
    return voltage / resistance;
}

int main(int argc, char *argv[]) {
    double resistance, empedance;
    char file_path[100];

    if (argc < 4) {
        printf("insufficient parameters. usage: load2.exe <empedance> <resistance> <file_path>\n");


        printf("Enter empedance: ");
        scanf("%lf", &empedance);


        printf("Enter resistance: ");
        scanf("%lf", &resistance);


        printf("Enter file path: ");
        scanf("%s", file_path);
    } else {
        empedance = atof(argv[1]);
        resistance = atof(argv[2]);
        strcpy(file_path, argv[3]);
    }

    FILE *file = fopen(file_path, "r");

    if (file == NULL) {
        printf("file not open.\n");
        return 1;
    }
    if (empedance == 0.0 || resistance == 0.0) {
        printf("Empedance or resistance values must be non-zero.\n");
        return 1;
    }


    double voltage;
    double timeStep = 1.0 / 1000;
    double time = 0.0;
    int sampleCount = 0;

    printf("voltages:\n");

    while (fscanf(file, "%lf", &voltage) == 1 && sampleCount < 1000) {
        double angularFrequency = 2 * PI * voltage;

        for (int i = 0; i < 1000; i++) {
            double instantaneousVoltage = voltage * sin(angularFrequency * time);
            double instantaneousCurrent = calculateCurrent(instantaneousVoltage, resistance);


            double empedanceVoltage = instantaneousVoltage / empedance;
            double empedanceCurrent = calculateCurrent(empedanceVoltage, resistance);

            printf("time: %.4f s, voltage: %.2f V, current: %.2f A, empedance voltage: %.4f V, empedance current: %.4f A\n", time, instantaneousVoltage, instantaneousCurrent, empedanceVoltage, empedanceCurrent);
            time += timeStep;
            sampleCount++;
        }
    }

    fclose(file);

    return 0;
}
*/

17.05.2023
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define PI 3.14159265359

double calculateCurrent(double voltage, double resistance) {
    return voltage / resistance;
}

int main(int argc, char *argv[]) {
    double resistance, empedance;
    char file_path[100];

    if (argc < 4) {
        printf("insufficient parameters. usage: load2.exe <empedance> <resistance> <file_path>\n");
        return 1;
    } else {
        empedance = atof(argv[1]);
        resistance = atof(argv[2]);
        strcpy(file_path, argv[3]);
    }

    FILE *file = fopen(file_path, "r");

    if (file == NULL) {
        printf("file not open.\n");
        return 1;
    }
    if (empedance == 0.0 || resistance == 0.0) {
        printf("Empedance or resistance values must be non-zero.\n");
        return 1;
    }

    double voltage;
    int sampleCount = 0;

    while (fscanf(file, "%lf", &voltage) == 1) {
        sampleCount++;
    }

    fseek(file, 0, SEEK_SET);

    double timeStep = 1.0 / sampleCount;
    double time = 0.0;

    printf("voltages:\n");

    while (fscanf(file, "%lf", &voltage) == 1 && sampleCount > 0) {
        double angularFrequency = 2 * PI * voltage;
        double instantaneousVoltage = voltage * sin(angularFrequency * time);
        double instantaneousCurrent = calculateCurrent(instantaneousVoltage, resistance);
        double empedanceVoltage = instantaneousVoltage / empedance;
        double empedanceCurrent = calculateCurrent(empedanceVoltage, resistance);

        printf("time: %.4f s, voltage: %.2f V, current: %.2f A, empedance voltage: %.4f V, empedance current: %.4f A\n",
               time, instantaneousVoltage, instantaneousCurrent, empedanceVoltage, empedanceCurrent);
        time += timeStep;
    }

    fclose(file);

    return 0;
}
18.05.2023 09:52
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main(int argc, char *argv[]) {
    if (argc != 5) {
        printf("Usage: %s <sampleCount> <timeStep> <filename> <resistance>\n", argv[0]);
        return 1;
    }

    int sampleCount = atoi(argv[1]);
    double timeStep = atof(argv[2]);
    FILE *file = fopen(argv[3], "r");
    double resistance = atof(argv[4]);

    if (file == NULL) {
        printf("Error opening file.\n");
        return 1;
    }

    double voltage;
    int validVoltageCount = 0;

    printf("voltages:\n");
    while (fscanf(file, "%lf", &voltage) == 1) {
        double angularFrequency = 2.0 * M_PI / (sampleCount * timeStep);
        double instantaneousVoltage = voltage * sin(angularFrequency * validVoltageCount * timeStep);

        double impedanceVoltage = instantaneousVoltage / sqrt(2.0);
        double impedanceCurrent = impedanceVoltage / resistance;

        printf("time: %.4lf s, voltage: %.2lf V, current: %.2lf A, impedance voltage: %.4lf V, impedance current: %.4lf A\n",
               validVoltageCount * timeStep, voltage, impedanceCurrent, impedanceVoltage, impedanceCurrent);

        validVoltageCount++;

        if (validVoltageCount >= sampleCount) {
            break;
        }
    }

    fclose(file);
    return 0;
}
18.05.2023        11:31
